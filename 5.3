#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>
#include <Keypad.h>
#define TRIG_PIN 10
#define ECHO_PIN 11

LiquidCrystal_I2C lcd(0x27, 16, 2); // Adjust I2C address if needed
Servo myServo;

// Set up the keypad layout
const byte ROWS = 4; // four rows
const byte COLS = 4; // four columns
char keys[ROWS][COLS] = {
{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}
};
byte rowPins[ROWS] = {5, 4, 3, 2}; // Connect keypad row pins
byte colPins[COLS] = {A3, A2, A1, A0}; // Connect keypad column pins

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
String inputPassword = "";
const String correctPassword = "1234"; // Change this to your desired password

void setup() {
pinMode(TRIG_PIN, OUTPUT);
pinMode(ECHO_PIN, INPUT);
lcd.init ();
lcd.backlight();
myServo.attach(12); // Connect servo to pin 10
myServo.write(0); // Lock position
lcd.print("Security System");
delay(2000);
lcd.clear();
}

void loop() {
long distance = measureDistance();

if (distance > 0 && distance < 20) { // Detect when someone is close
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Enter Password:");
lcd.setCursor(0, 1);
char key = keypad.getKey();
if (key) {
if (key == '#') { // '#' to confirm the password
if (inputPassword == correctPassword) {
lcd.clear();
lcd.print("Access Granted");
openLock();
} else {
lcd.clear();
lcd.print("Access Denied");
delay(2000);
}
inputPassword = ""; // Reset the input password
} else if (key == '*') { // '*' to clear input
inputPassword = "";
lcd.setCursor(0, 1);
lcd.print("Cleared ");
} else {
inputPassword += key; // Append key to password
lcd.print(key);
}
}
} else {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Waiting...");
}
delay(100);
}

void openLock() {
myServo.write(90); // Open lock
delay(5000); // Keep it open for 5 seconds
myServo.write(0); // Lock again
}

long measureDistance() {
digitalWrite(TRIG_PIN, LOW);
delayMicroseconds(2);
digitalWrite(TRIG_PIN, HIGH);
delayMicroseconds(10);
digitalWrite(TRIG_PIN, LOW);
}

void openLock() {
myServo.write(90); // Open lock
delay(5000); // Keep it open for 5 seconds
myServo.write(0); // Lock again
}

long measureDistance() {
digitalWrite(TRIG_PIN, LOW);
delayMicroseconds(2);
digitalWrite(TRIG_PIN, HIGH);
delayMicroseconds(10);
digitalWrite(TRIG_PIN, LOW);
long duration = pulseIn(ECHO_PIN, HIGH);
long distance = duration * 0.034 / 2;
return distance;
}
